{{ range $subdomain, $containers := groupByMulti $ "Env.CRE_PHP_ROOT" "," }}

{{ $subdomain := trim $subdomain }}
{{ $host := (printf "%s.%s" $subdomain $CurrentDomain) }}

# {{ $host }}

upstream {{ $host }} {


{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
				## Can be connect with "{{ $containerNetwork.Name }}" network

				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
                                        # {{ $container.Name }}
                                        # first branch
			                server {{ $containerNetwork.IP }}:{{ $address.Port }};
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.CRE_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
			                # {{ $container.Name }}
                                        # second branch
			                server {{ $containerNetwork.IP }}:{{ $port }};
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}


}

server {
    #listen 80 default;
    listen 80;
    #listen [::]:80 default;
    #listen 4443 ssl;
    #listen [::]:443 default ssl;


    #ssl_certificate     /certs/domain.crt;
    #ssl_certificate_key /certs/domain.key;   
    #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    #ssl_ciphers         HIGH:!aNULL:!MD5;

 
    client_max_body_size 108M;

    access_log /var/log/nginx/clima.access.log;


    root /cre/www;
    index index.php;

    if (!-e $request_filename) {
        rewrite ^.*$ /index.php last;
    }



        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        location ~ ^/(data|config|\.ht|db_structure\.xml|README) {
            deny all;
        }

        location / {
            rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
            rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;
            rewrite ^/.well-known/carddav /remote.php/carddav/ redirect;
            rewrite ^/.well-known/caldav /remote.php/caldav/ redirect;
            rewrite ^(/core/doc/[^\/]+/)$ $1/index.html;
            try_files $uri $uri/ index.php;
        }

        location ~ ^(.+?\.php)(/.*)?$ {
            try_files $1 = 404;
            include fastcgi_params;
            fastcgi_param modHeadersAvailable true;
            fastcgi_param SCRIPT_FILENAME $document_root$1;
            fastcgi_param PATH_INFO $2;
            fastcgi_pass crephp:9000;
        }

        location ~* ^.+\.(jpg|jpeg|gif|bmp|ico|png|css|js|swf)$ {
            expires 30d;
            access_log off;
        }


    location ~ \.php$ {
        fastcgi_pass crephp:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PHP_VALUE "error_log=/var/log/nginx/clima_php_errors.log";
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        include fastcgi_params;
    }
    
}

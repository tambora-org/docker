<?php
  // Current Container Name : {{ $CurrentContainer.Name }}
  $dbData = [];
  // add mySQL data
{{ if $CurrentContainer.Env.MYSQL_DB }}
 {{ range $mysqlServerPWD, $containers := groupByMulti $ "Env.MYSQL_ROOT_PWD" "," }}
  {{ range $index, $container := $containers }}
   {{ $mySqlPort := or $container.Env.MYSQL_PORT "3306" }}
    $port = '{{ $mySqlPort }}';
   {{ range $containerNetwork := $container.Networks }}
    $host = '{{ $containerNetwork.IP }}';
    $dbName = '{{ $CurrentContainer.Env.MYSQL_DB }}';  //todo: handle multiple comma seperated
    {{ if $CurrentContainer.Env.MYSQL_USER }}
    $user = '{{ $CurrentContainer.Env.MYSQL_USER }}';
    {{ else }}
    $user = substr('U:'.md5($dbName),0,24); 
    {{ end }}
    {{ if $CurrentContainer.Env.MYSQL_PWD }}
    $password = '{{ $CurrentContainer.Env.MYSQL_PWD }}';
    {{ else }}
    $password = substr('PWD:'.md5($user.":".'{{ sha1 $mysqlServerPWD }}'),0,32); 
    {{ end }}
    $dbData['mysql:'.$dbName] = 
     ['type' => 'mysql', 'host' => $host, 'port' => $port, 
      'dbname' => $dbName, 'user' => $user, 'password' => $password, 
       'pdo' => "mysql:host=$host:$port;dbname=$dbName;user=$user;password=$password"];
   {{ end }}
  {{ end }} 
 {{ end }} 
{{ end }}

  // add postgres data
{{ if $CurrentContainer.Env.POSTGRES_DB }}
 {{ range $pgsqlServerPWD, $containers := groupByMulti $ "Env.POSTGRES_ROOT_PWD" "," }}
  {{ range $index, $container := $containers }}
   {{ $pgSqlPort := or $container.Env.MYSQL_PORT "5432" }}
    $port = '{{ $pgSqlPort }}';
   {{ range $containerNetwork := $container.Networks }}
    $host = '{{ $containerNetwork.IP }}';
    //$dbName = '{{ $CurrentContainer.Env.POSTGRES_DB }}';  //todo: handle multiple comma seperated
    {{ range $dbNameS := split $CurrentContainer.Env.POSTGRES_DB "," }} 
      $dbName = '{{ $dbNameS }}';
      {{ if $CurrentContainer.Env.POSTGRES_USER }}
      $user = '{{ $CurrentContainer.Env.POSTGRES_USER }}';
      {{ else }}
      $user = substr('U:'.md5($dbName),0,24); 
      {{ end }}
      {{ if $CurrentContainer.Env.POSTGRES_PWD }}
      $password = '{{ $CurrentContainer.Env.POSTGRES_PWD }}';
      {{ else }}
      $password = substr('PWD:'.md5($user.":".'{{ sha1 $pgsqlServerPWD }}'),0,32); 
      {{ end }}
      $dbData['pgsql:'.$dbName] = 
       ['type' => 'pgsql', 'host' => $host, 'port' => $port, 
        'dbname' => $dbName, 'user' => $user, 'password' => $password, 
         'pdo' => "pgsql:host=$host;port=$port;dbname=$dbName;user=$user;password=$password"];
    {{ end }}
   {{ end }}
  {{ end }} 
 {{ end }} 
{{ end }}

  // add sqlite data
{{ if $CurrentContainer.Env.SQLITE_DB }}
    $dbName = '{{ $CurrentContainer.Env.SQLITE_DB }}';
    $host = '{{ $CurrentContainer.IP }}';
    $fileName='/cre/www/sqlite/'.$dbName.'.db'; 
    $dbData['sqlite:'.$dbName] = 
     ['type' => 'sqlite', 'host' => $host, 'port' => null, 
      'dbname' => $dbName, 'user' => $dbName, 'password' => null, 
       'pdo' => "sqlite:$fileName"];
{{ end }}

  function inqDbConnections()
  {
    global $dbData; 
    return $dbData; 
  }
?>


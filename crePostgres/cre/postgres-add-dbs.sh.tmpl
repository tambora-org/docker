#!/bin/bash 

# Current Name : {{ $CurrentContainer.Name }}
export TERM=xterm
echo "postgres add databases:"
POSTGRESQL_DATA=/var/lib/postgresql/${POSTGRES_VERSION}/main
POSTGRESQL_BIN=/usr/lib/postgresql/${POSTGRES_VERSION}/bin
sleep 5

until ${POSTGRESQL_BIN}/pg_isready -h localhost -p 5432 -U postgres
do
 echo "Waiting for local postgres"
 sleep 2;
done

touch /cre/database-busy.txt

{{ $rootPassword := or $CurrentContainer.Env.POSTGRES_ROOT_PWD "_secret_" }}

{{ range $postgresDb, $containers := groupByMulti $ "Env.POSTGRES_DB" "," }}
##begin of all databases
## add db: {{ $postgresDb }}

{{ range $index, $container := $containers }}
## begin of all containers
## add user and assign to db
## user: POSTGRES_USER, POSTGRES_PWD ?
{{ if $container.Env.POSTGRES_USER }}
## POSTGRES_USER : {{ $container.Env.POSTGRES_USER }}
postgres_user="{{ $container.Env.POSTGRES_USER }}"
{{ else }}
## NO USER: md5 of {{ $container.Env.POSTGRES_DB }}
postgres_user="U:$(printf '%s' '{{ $container.Env.POSTGRES_DB }}' | md5sum | cut -d ' ' -f 1)"
postgres_user="${postgres_user:0:24}"
{{ end }}
{{ if $container.Env.POSTGRES_PWD }}
## POSTGRES_PWD : {{ $container.Env.POSTGRES_PWD }}
postgres_pwd="{{ $container.Env.POSTGRES_PWD }}"
{{else}}
postgres_pwd="PWD:$(printf '%s' '$postgres_user:{{sha1 $rootPassword}}' | md5sum | cut -d ' ' -f 1)"
postgres_pwd="${postgres_pwd:0:32}"
{{ end }}

#check if database already exists?
if [ $(${POSTGRESQL_BIN}/psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{$postgresDb}}'") ]; then
 echo "Database exists: {{ $postgresDb }}"
else
 echo "Database missing: {{ $postgresDb }}"
 echo "Creating database: {{ $postgresDb }}"
 ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres -c "CREATE DATABASE {{$postgresDb}}"
fi

#check if user already exists?
if [ $(${POSTGRESQL_BIN}/psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$postgres_user'") ]; then
 echo "User exists: $postgres_user"
 echo "Adapt user:  $postgres_user"
 ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres -c "ALTER USER '$postgres_user' WITH ENCRYPTED PASSWORD '$postgres_pwd'"
else
 echo "User missing: $postgres_user"
 echo "Creating user: $postgres_user"
 ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres -c "CREATE USER '$postgres_user' WITH ENCRYPTED PASSWORD '$postgres_pwd'"
fi

## if init dump file exists import data
if [ -e /cre/postgres/dumps/{{ $postgresDb }}/database.init.dump ]
then
   echo "Initialize datebase by file: {{ $postgresDb }}"
   ##${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --single-transaction --username postgres -f /cre/postgres/dumps/{{ $postgresDb }}/database.init.dump 
   ${POSTGRESQL_BIN}/psql --username=postgres --dbname={{ $postgresDb }} -f /cre/postgres/dumps/{{ $postgresDb }}/database.init.dump
   # gunzip -c /cre/postgres/{{ $postgresDb }}.init.sql.gz | ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username postgres  
   mv /cre/postgres/dumps/{{ $postgresDb }}/database.init.dump /cre/postgres/dumps/{{ $postgresDb }}/database.done.dump
fi

## Install (or Upgrade) Postgis extensions
{{ if $CurrentContainer.Env.POSTGIS_VERSION }}
  {{ $postgisVerson := $CurrentContainer.Env.POSTGIS_VERSION }}
  echo "Upgrade database: {{ $postgresDb }} to PostGIS version: {{ $postgisVerson }}"
  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c 'CREATE EXTENSION IF NOT EXISTS postgis VERSION "{{ $postgisVerson }}" '
  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c "ALTER EXTENSION postgis UPDATE TO '{{ $postgisVerson }}' "

  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c 'CREATE EXTENSION IF NOT EXISTS postgis_topology VERSION "{{ $postgisVerson }}" '
  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c "ALTER EXTENSION postgis_topology UPDATE TO '{{ $postgisVerson }}' "

  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c "CREATE EXTENSION IF NOT EXISTS fuzzystrmatch "

  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c 'CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder VERSION "{{ $postgisVerson }}" '
  ${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres --dbname="{{$postgresDb}}" -c "ALTER EXTENSION postgis_tiger_geocoder UPDATE TO '{{ $postgisVerson }}' "

{{ end }}

## grant access for user to table
${POSTGRESQL_BIN}/psql -v ON_ERROR_STOP=1 --username=postgres -c "GRANT ALL PRIVILEGES ON DATABASE {{$postgresDb}} TO $postgres_user"

{{ end }} 
##end of all containers
{{ end }} 
##end of all databases

rm -f /cre/database-busy.txt

echo "Database setup finished"

#!/bin/bash 
export TERM=xterm
echo "mysql add databases:"
POSTGRESQL_DATA=/var/lib/postgresql/${POSTGRES_VERSION}/main
sleep 20


#First check if already running
POSTGRES_RUNNING=0
pg_ctl -D $POSTGRESQL_DATA status
#if so, stop (slow)
if [$? -eq 0]
then
 echo "Running"
 POSTGRES_RUNNING=1
 pg_ctl -D $POSTGRESQL_DATA -m fast -w stop
else
 echo "Not running"
fi

#Start Postgres locally
pg_ctl -D $POSTGRESQL_DATA -o "-c listen_addresses='localhost'" -w start
until pg_is_ready -h localhost -p 5432 -U postgres
do
 echo "Waiting for local postgres"
 sleep 2;
done

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $rootPassword := or $CurrentContainer.Env.POSTGRES_ROOT_PWD "_secret_" }}

{{ range $postgresDb, $containers := groupByMulti $ "Env.POSTGRES_DB" "," }}
##begin of all databases
## add db: {{ $postgresDb }}

{{ range $index, $container := $containers }}
## begin of all containers
## add user and assign to db
## user: POSTGRES_USER, POSTGRES_PWD ?
{{ if $container.Env.POSTGRES_USER }}
## POSTGRES_USER : {{ $container.Env.POSTGRES_USER }}
postgres_user="{{ $container.Env.POSTGRES_USER }}"
{{ else }}
## NO USER: md5 of {{ $container.Env.POSTGRES_DB }}
postgres_user="U:$(printf '%s' '{{ $container.Env.POSTGRES_DB }}' | md5sum | cut -d ' ' -f 1)"
postgres_user="${postgres_user:0:24}"
{{ end }}
{{ if $container.Env.POSTGRES_PWD }}
## MYSQL_PWD : {{ $container.Env.POSTGRES_PWD }}
postgres_pwd="{{ $container.Env.POSTGRES_PWD }}"
{{else}}
postgres_pwd="PWD:$(printf '%s' '$postgres_user:{{sha1 $rootPassword}}' | md5sum | cut -d ' ' -f 1)"
postgres_pwd="${pwd:0:32}"
{{ end }}

#check if database already exists?
if [ $(psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{$postgresDb}}'") ]; then
 echo "Database exists: {{ $postgresDb }}"
else
 echo "Database missing: {{ $postgresDb }}"
 echo "Creating database: {{ $postgresDb }}"
 psql -v ON_ERROR_STOP=1 --username postgres -c "CREATE DATABASE {{$postgresDb}}"
fi

#check if user already exists?
if [ $(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$postgres_user'") ]; then
 echo "User exists: $postgres_user"
 echo "Adapt user:  $postgres_user"
 psql -v ON_ERROR_STOP=1 --username postgres -c "Alter USER $postgres_user WITH ENCRYPTED PASSWORD '$postgres_pwd'"
else
 echo "User missing: $postgres_user"
 echo "Creating user: $postgres_user"
 psql -v ON_ERROR_STOP=1 --username postgres -c "CREATE USER $postgres_user WITH ENCRYPTED PASSWORD '$postgres_pwd'"
fi

## if init sql file exists import data
{{ if (exists "/cre/mysql/{{ $postgresDb }}.init.sql") }}
if [ -e /cre/mysql/{{ $postgresDb }}.init.sql ]
then
   echo "Initialize datebase by file: {{ $postgresDb }}"
   psql -v ON_ERROR_STOP=1 --username postgres -f /cre/mysql/{{ $postgresDb }}.init.sql   
   # gunzip -c /cre/mysql/{{ $postgresDb }}.init.sql.gz | psql -v ON_ERROR_STOP=1 --username postgres  
   mv /cre/mysql/{{ $postgresDb }}.init.sql /cre/mysql/{{ $postgresDb }}.done.sql
fi
{{ end }}

## grant access for user to table
psql -v ON_ERROR_STOP=1 --username postgres -c "GRANT ALL PRIVILEGES ON DATABASE {{$postgresDb}} TO $postgres_user"

{{ end }} 
##end of all containers
{{ end }} 
##end of all databases

#stop local postgres again
pg_ctl -D $POSTGRESQL_DATA -m fast -w stop

#if had run, restart
if [$POSTGRES_RUNNING -eq 1]
then
 echo "Was running"
 /cre/run.sh
else
 echo "Was not running"
fi
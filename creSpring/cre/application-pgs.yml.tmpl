# https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/common-application-properties.html
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#data-properties

#Liquibase 
# https://reflectoring.io/database-migration-spring-boot-liquibase/

liquibase:
  change-log: classpath:db/changelog/changelog.xml
  enabled: true

spring:
  liquibase:
    change-log: classpath:db/changelog/changelog.xml
    enabled: true
#   defaultSchema=mmm
#   liquibaseSchema=mmm



# DB jpa
#spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
#   hibernate:
#     ddl-auto: none
#     show-sql: true
#     liquibase:
#       change-log: classpath:db/changelog/changelog.xml



# add postgres data
#spring:
  datasource:
    driver-class-name: org.postgresql.Driver
{{ if $CurrentContainer.Env.POSTGRES_DB }}
 {{ range $pgsqlServerPWD, $containers := groupByMulti $ "Env.POSTGRES_ROOT_PWD" "," }}
  {{ range $index, $container := $containers }}
   {{ $pgSqlPort := or $container.Env.MYSQL_PORT "5432" }}
#    $port = '{{ $pgSqlPort }}';
   {{ range $containerNetwork := $container.Networks }}
#    $host = '{{ $containerNetwork.IP }}';
# $dbName = '{{ $CurrentContainer.Env.POSTGRES_DB }}';  //todo: handle multiple comma seperated
    {{ range $dbNameS := split $CurrentContainer.Env.POSTGRES_DB "," }} 
    url: jdbc:postgresql://{{ $containerNetwork.IP }}:{{ $pgSqlPort }}/{{ $dbNameS }}
#      $dbName = '{{ $dbNameS }}';
      {{ if $CurrentContainer.Env.POSTGRES_USER }}
    username: {{ $CurrentContainer.Env.POSTGRES_USER }}
      {{ else }}
       {{ $dbUser := (printf "U:.%s" (sha1 $dbNameS)) }}
#         $dbUser := slice (printf "U:.%s" (sha1 $dbNameS)) 0 24  # slice not working - fnc not defined
    username: {{ $dbUser }}
      {{ end }}
      {{ if $CurrentContainer.Env.POSTGRES_PWD }}
    password: {{ $CurrentContainer.Env.POSTGRES_PWD }}
      {{ else }}
        {{ if $CurrentContainer.Env.POSTGRES_USER }}
         {{ $dbUser := $CurrentContainer.Env.POSTGRES_USER }}
         {{ $dbPassword := (printf "%s:%s" $dbUser (sha1 $pgsqlServerPWD)) }}
         {{ $dbPassword := (printf "PWD:.%s" (sha1 $dbPassword)) }}
#           $dbPassword := slice (printf "PWD:.%s" (sha1 $dbPassword)) 0 32  # slice not working
    password: {{ $dbPassword }}
        {{ else }}
         {{ $dbUser := (printf "U:.%s" (sha1 $dbNameS)) }}
#           $dbUser := slice (printf "U:.%s" (sha1 $dbNameS)) 0 24  # slice not working - fnc not defined
         {{ $dbPassword := (printf "%s:%s" $dbUser (sha1 $pgsqlServerPWD)) }}
         {{ $dbPassword := (printf "PWD:.%s" (sha1 $dbPassword)) }}
#           $dbPassword := slice (printf "PWD:.%s" (sha1 $dbPassword)) 0 32  # slice not working
    password: {{ $dbPassword }}
        {{ end }}

      {{ end }}

    {{ end }}
   {{ end }}
  {{ end }} 
 {{ end }} 
{{ end }}

#   initialization-mode=always
#   initialize=true
#   schema=classpath:/schema.sql
#   continue-on-error=true

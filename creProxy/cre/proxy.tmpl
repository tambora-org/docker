{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $CurrentDomain := or $CurrentContainer.Env.CRE_DOMAIN "localhost" }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
# not working in the moment with certbot: https://github.com/certbot/certbot/issues/5199
#server_names_hash_bucket_size 128;

# Default dhparam
{{ if (exists "/etc/letsencrypt/live/dhparam.pem") }}
 ssl_dhparam "/etc/letsencrypt/live/dhparam.pem";
{{ else if (exists "/etc/letsencrypt/openssl/dhparam.pem") }}
 ssl_dhparam /etc/letsencrypt/openssl/dhparam.pem;
{{ else if (exists "/etc/nginx/dhparam/dhparam.pem") }}
 ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{ end }}


# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	access_log /var/log/nginx/access.log vhost;
	return 503;
}

{{ range $subdomain, $containers := groupByMulti $ "Env.CRE_SUBDOMAIN" "," }}

{{ $subdomain := trim $subdomain }}
{{ $host := (printf "%s.%s" $subdomain $CurrentDomain) }}

# {{ $host }}

upstream {{ $host }} {


{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
				## Can be connect with "{{ $containerNetwork.Name }}" network

				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
                                        # {{ $container.Name }}
                                        # first branch
			                server {{ $containerNetwork.IP }}:{{ $address.Port }};
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.CRE_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
			                # {{ $container.Name }}
                                        # second branch
			                server {{ $containerNetwork.IP }}:{{ $port }};
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}


}





server {
	server_name {{ $host }};
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	return 301 https://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;

	{{ if eq $network_tag "internal" }}
	# Only allow traffic from internal clients - TODO: use later for localhost
	include /cre/network_internal.conf;
	{{ end }}

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS';
	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

        {{ if (exists (printf "/etc/letsencrypt/live/%s/fullchain.pem" $host)) }}
         # certbot certifictes
         ssl_certificate {{ printf "/etc/letsencrypt/live/%s/fullchain.pem" $host }};
         {{ if (exists (printf "/etc/letsencrypt/live/%s/privkey.pem" $host)) }}
	  ssl_certificate_key {{ printf "/etc/letsencrypt/live/%s/privkey.pem" $host }};
	 {{ end }}
	 {{ if (exists (printf "/etc/letsencrypt/live/%s.dhparam.pem" $host)) }}
	  ssl_dhparam {{ printf "/etc/letsencrypt/live/%s.dhparam.pem" $host }};
         {{ else if (exists "/etc/letsencrypt/live/dhparam.pem") }}
          ssl_dhparam /etc/letsencrypt/live/dhparam.pem;
	 {{ end }}

        {{ else if (exists (printf "/etc/letsencrypt/openssl/%s.cert.pem" $host)) }}
         # openssl certificates
         ssl_certificate {{ printf "/etc/letsencrypt/openssl/%s.cert.pem" $host }};
         {{ if (exists (printf "/etc/letsencrypt/openssl/%s.key.pem" $host)) }}
	  ssl_certificate_key {{ printf "/etc/letsencrypt/openssl/%s.key.pem" $host }};
	 {{ end }}
	 {{ if (exists (printf "/etc/letsencrypt/openssl/%s.dhparam.pem" $host)) }}
	  ssl_dhparam {{ printf "/etc/letsencrypt/openssl/%s.dhparam.pem" $host }};
         {{ else if (exists "/etc/letsencrypt/openssl/dhparam.pem") }}
          ssl_dhparam /etc/letsencrypt/openssl/dhparam.pem;
	 {{ end }}
        {{ end }}

	add_header Strict-Transport-Security "max-age=31536000";
        {{ if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{ end }}
	location / {
                proxy_pass http://{{$host}};
	}
}




{{ end }}

#!/bin/sh 
sleep 3

until [ $(pgrep nginx | wc -l)  > 0 ]
do
 echo "Waiting for nginx"
 sleep 2
done
sleep 2

# Current Container Name : {{ $CurrentContainer.Name }}
if ! [ -e /etc/letsencrypt/live ]
then
   mkdir /etc/letsencrypt/live
fi

## if ! [ -e /etc/letsencrypt/live/dhparam.pem ]
## then
##    openssl dhparam -out /etc/letsencrypt/live/dhparam.pem 4096
## fi

{{ $CurrentDomain := or $CurrentContainer.Env.CRE_DOMAIN "localhost" }}
{{ $LocalHost :=  or (hasSuffix "localhost" $CurrentDomain) (hasPrefix "localhost" $CurrentDomain) }}
## Localhost?: {{ $LocalHost }} ## 

# use --staging for development and during implementation - works not for localhost / use openssl instead
# staging does not work with Strict-Transport-Security - see proxy.tmpl
{{ if $CurrentContainer.Env.CRE_DEVELOPMENT }}
certbot --staging --noninteractive --nginx --keep-until-expiring --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $CurrentDomain }}
{{ else }}
isInvalid=$(certbot --domain {{ $CurrentDomain }} | grep "Expiry Date" | grep -c "INVALID")
if [ $isInvalid -eq 0 ]; then
  certbot --noninteractive --nginx --keep-until-expiring --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $CurrentDomain }}
else
  certbot --noninteractive --nginx --force-renewal --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $CurrentDomain }}
fi
{{end}}


{{ range $subdomain, $containers := groupByMulti $ "Env.CRE_SUBDOMAIN" "," }}

{{ $subdomain := trim $subdomain }}
{{ $host := (printf "%s.%s" $subdomain $CurrentDomain) }}

# {{ $host }}

# use --staging for development and during implementation - works not for localhost / use openssl instead
## TODO: domain only does only work if domain is really mapped - i.e. does not work for clim-ability.eu....
{{ if $CurrentContainer.Env.CRE_DEVELOPMENT }}
certbot --staging --noninteractive --nginx --keep-until-expiring --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $host }}
{{ else }}
isInvalid=$(certbot --domain {{ $host }} | grep "Expiry Date" | grep -c "INVALID")
if [ $isInvalid -eq 0 ]; then
  certbot --noninteractive --nginx --keep-until-expiring --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $host }}
else
  certbot --noninteractive --nginx --force-renewal --agree-tos -m admin@{{ $CurrentDomain }} --domains {{ $host }}
fi


{{end}}


{{ end }}

# Finally reload nginx
#nginx -s reload
